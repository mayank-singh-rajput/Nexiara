{"ast":null,"code":"var _jsxFileName = \"D:\\\\Intern\\\\Nexiara\\\\Nexiara\\\\Frontend\\\\src\\\\pages\\\\question.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { getQuestion } from \"../apis/question\";\nimport QuestionCard from \"../components/ui/questionCard\";\nimport { createResult } from \"../apis/result\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultData = {\n  Questions: []\n};\nfunction Question() {\n  _s();\n  const [formData, setFormData] = useState(defaultData);\n  const [isLoading, setIsLoading] = useState(true);\n  const [QuestionList, setQuestionList] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [remainingTime, setRemainingTime] = useState(30); // Initial time in seconds\n  const pageRoute = useNavigate();\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      try {\n        const {\n          data\n        } = await getQuestion();\n        if (data && data.length > 0) {\n          setQuestionList(data);\n          setFormData({\n            Questions: data.map(question => ({\n              QuestionId: question._id,\n              ChoosedOption: ''\n            }))\n          });\n        } else {\n          toast.warning(\"No questions found.\");\n        }\n      } catch (error) {\n        toast.warning(\"Error fetching questions.\");\n        console.error(\"Error fetching questions:\", error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchQuestions();\n  }, []);\n  useEffect(() => {\n    let timer;\n    if (currentIndex < QuestionList.length) {\n      setRemainingTime(30);\n      timer = setInterval(() => {\n        setRemainingTime(prevTime => {\n          if (prevTime === 1) {\n            handleAnswer('');\n            return 30;\n          } else {\n            return prevTime - 1;\n          }\n        });\n      }, 1000);\n    }\n    return () => clearInterval(timer);\n  }, [currentIndex, QuestionList]);\n  const handleAnswer = option => {\n    setFormData(prevData => {\n      const updatedQuestions = [...prevData.Questions];\n      updatedQuestions[currentIndex] = {\n        ...updatedQuestions[currentIndex],\n        ChoosedOption: option\n      };\n      return {\n        ...prevData,\n        Questions: updatedQuestions\n      };\n    });\n    if (currentIndex < QuestionList.length - 1) {\n      setCurrentIndex(prevIndex => prevIndex + 1);\n    } else {\n      formSubmit();\n    }\n  };\n  const formSubmit = async () => {\n    const answeredQuestions = formData.Questions.filter(question => question.ChoosedOption !== '');\n    if (answeredQuestions.length < QuestionList.length) {\n      toast.warning(\"Please answer all questions before submitting.\");\n      return;\n    }\n    setIsLoading(true);\n    try {\n      const {\n        data\n      } = await createResult(formData);\n      if (data) {\n        toast.success(\"Successfully submitted all your answers!\");\n        pageRoute('/result');\n      }\n    } catch (error) {\n      toast.error(\"Failed to submit result!\");\n      console.error(\"Error submitting result:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-[#121418] flex justify-center items-center h-screen\",\n    children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-white\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `absolute border-4 top-0 right-0 m-4 p-4 font-bold text-3xl ${remainingTime < 10 ? 'text-rose-900' : 'text-white'}`,\n        children: [\" Remaining Time: \", remainingTime]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full sm:w-[600px] h-[400px] mt-20 relative\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pl-4 text-white\",\n          children: QuestionList.length > 0 ? /*#__PURE__*/_jsxDEV(QuestionCard, {\n            question: QuestionList[currentIndex],\n            setSelected: option => handleAnswer(option)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 15\n          }, this) : \"Question list empty!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n_s(Question, \"0SZmb02yQUkjBv8DVdh3Goguqgk=\", false, function () {\n  return [useNavigate];\n});\n_c = Question;\nexport default Question;\nvar _c;\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","toast","getQuestion","QuestionCard","createResult","defaultData","Questions","Question","formData","setFormData","isLoading","setIsLoading","QuestionList","setQuestionList","currentIndex","setCurrentIndex","remainingTime","setRemainingTime","pageRoute","fetchQuestions","data","length","map","question","QuestionId","_id","ChoosedOption","warning","error","console","timer","setInterval","prevTime","handleAnswer","clearInterval","option","prevData","updatedQuestions","prevIndex","formSubmit","answeredQuestions","filter","success"],"sources":["D:/Intern/Nexiara/Nexiara/Frontend/src/pages/question.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport { getQuestion } from \"../apis/question\";\r\nimport QuestionCard from \"../components/ui/questionCard\";\r\nimport { createResult } from \"../apis/result\";\r\n\r\nconst defaultData = {\r\n  Questions: []\r\n};\r\n\r\nfunction Question() {\r\n  const [formData, setFormData] = useState(defaultData);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [QuestionList, setQuestionList] = useState([]);\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [remainingTime, setRemainingTime] = useState(30); // Initial time in seconds\r\n  const pageRoute = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const fetchQuestions = async () => {\r\n      try {\r\n        const { data } = await getQuestion();\r\n        if (data && data.length > 0) {\r\n          setQuestionList(data);\r\n          setFormData({\r\n            Questions: data.map(question => ({\r\n              QuestionId: question._id,\r\n              ChoosedOption: ''\r\n            }))\r\n          });\r\n        } else {\r\n          toast.warning(\"No questions found.\");\r\n        }\r\n      } catch (error) {\r\n        toast.warning(\"Error fetching questions.\");\r\n        console.error(\"Error fetching questions:\", error);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    fetchQuestions();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let timer;\r\n    if (currentIndex < QuestionList.length) {\r\n      setRemainingTime(30);\r\n      timer = setInterval(() => {\r\n        setRemainingTime(prevTime => {\r\n          if (prevTime === 1) {\r\n            handleAnswer('');\r\n            return 30;\r\n          } else {\r\n            return prevTime - 1;\r\n          }\r\n        });\r\n      }, 1000);\r\n    }\r\n  \r\n    return () => clearInterval(timer);\r\n  }, [currentIndex, QuestionList]);\r\n\r\n  const handleAnswer = (option) => {\r\n    setFormData(prevData => {\r\n      const updatedQuestions = [...prevData.Questions];\r\n      updatedQuestions[currentIndex] = { \r\n        ...updatedQuestions[currentIndex], \r\n        ChoosedOption: option\r\n      };\r\n      return { ...prevData, Questions: updatedQuestions };\r\n    });\r\n\r\n    if (currentIndex < QuestionList.length - 1) {\r\n      setCurrentIndex(prevIndex => prevIndex + 1);\r\n    } else {\r\n      formSubmit();\r\n    }\r\n  };\r\n\r\n  const formSubmit = async () => {\r\n    const answeredQuestions = formData.Questions.filter(question => question.ChoosedOption !== '');\r\n    if (answeredQuestions.length < QuestionList.length) {\r\n      toast.warning(\"Please answer all questions before submitting.\");\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    try {\r\n      const { data } = await createResult(formData);\r\n      if (data) {\r\n        toast.success(\"Successfully submitted all your answers!\");\r\n        pageRoute('/result');\r\n      }\r\n    } catch (error) {\r\n      toast.error(\"Failed to submit result!\");\r\n      console.error(\"Error submitting result:\", error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-[#121418] flex justify-center items-center h-screen\">\r\n      {isLoading ? (\r\n        <div className=\"text-white\">Loading...</div>\r\n      ) : (\r\n        <div>\r\n          <div className={`absolute border-4 top-0 right-0 m-4 p-4 font-bold text-3xl ${remainingTime < 10 ? 'text-rose-900' : 'text-white'}`}> Remaining Time: {remainingTime}</div>\r\n        <div className=\"w-full sm:w-[600px] h-[400px] mt-20 relative\">\r\n          <div className=\"pl-4 text-white\">\r\n            {QuestionList.length > 0 ? (\r\n              <QuestionCard\r\n                question={QuestionList[currentIndex]}\r\n                setSelected={(option) => handleAnswer(option)} \r\n              />\r\n            ) : (\r\n              \"Question list empty!\"\r\n            )}\r\n          </div>\r\n        </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Question;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}